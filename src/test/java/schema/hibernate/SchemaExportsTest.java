package schema.hibernate;

import static com.google.common.truth.Truth.assertThat;
import static java.nio.charset.StandardCharsets.UTF_8;

import com.google.common.io.Files;
import com.google.common.io.Resources;
import java.io.File;
import java.io.IOException;
import org.junit.ClassRule;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.shaded.com.google.common.collect.ImmutableList;

/** Unit tests for {@link SchemaExports}. */
@RunWith(JUnit4.class)
public class SchemaExportsTest {

  public static final String ORM_PACKAGE = "schema.orm";
  public static final String GOLDEN_SCHEMA = "demo_schema.golden";
  public static final String UPDATE_TO_GOLDEN_SCRIPT = "update_initial_schema_to_golden.sql";

  /**
   * Starts a Docker container with Postgresql server and initializes it with the initial schema,
   * which contains the 'domain' table only.
   *
   * <p>This class starts a single database instance that is shared by all test methods.
   *
   * <p>The {@link #generateSchemaUpdate_mustRunFirst()} method must be the first test method in
   * this class, since the deployed schema serves as the baseline for the incremental changes
   * generated by the tool.
   */
  @ClassRule
  public static final PostgreSQLContainer<?> postgreSQLContainer =
      new PostgreSQLContainer<>("postgres:9.6.12")
          .withDatabaseName("anything-goes")
          .withUsername("whomever")
          .withPassword("doesn't-matter")
          .withInitScript("schema/hibernate/initial_schema.sql");

  @Rule public final TemporaryFolder temporaryFolder = new TemporaryFolder();

  @Test
  public void generateSchemaUpdate_mustRunFirst() throws IOException {
    File schemaFile = temporaryFolder.newFile();
    SchemaExports.exportSchemaUpdate(
        postgreSQLContainer.getJdbcUrl(),
        postgreSQLContainer.getUsername(),
        postgreSQLContainer.getPassword(),
        ImmutableList.of(ORM_PACKAGE),
        schemaFile.getAbsolutePath());

    assertThat(Files.asCharSource(schemaFile, UTF_8).readLines())
        .containsExactlyElementsIn(
            Resources.asCharSource(
                    Resources.getResource(getClass(), UPDATE_TO_GOLDEN_SCRIPT), UTF_8)
                .readLines())
        .inOrder();
  }

  @Test
  public void generateFullSchema() throws IOException {
    File schemaFile = temporaryFolder.newFile();
    SchemaExports.exportFullSchema(
        postgreSQLContainer.getJdbcUrl(),
        postgreSQLContainer.getUsername(),
        postgreSQLContainer.getPassword(),
        ImmutableList.of(ORM_PACKAGE),
        schemaFile.getAbsolutePath());

    assertThat(Files.asCharSource(schemaFile, UTF_8).readLines())
        .containsExactlyElementsIn(
            Resources.asCharSource(Resources.getResource(getClass(), GOLDEN_SCHEMA), UTF_8)
                .readLines())
        .inOrder();
  }
}
